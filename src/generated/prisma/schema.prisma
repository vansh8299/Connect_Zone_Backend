// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                    @id @default(cuid())
  firstName        String
  lastName         String
  email            String                    @unique
  password         String?
  googleId         String?                   @unique
  avatar           String?
  isEmailVerified  Boolean                   @default(false)
  about            String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  sentMessages     Message[]                 @relation("SentMessages")
  receivedMessages Message[]                 @relation("ReceivedMessages")
  conversations    ConversationParticipant[]
  createdGroups    Group[]                   @relation("GroupCreator")
}

model Conversation {
  id           String                    @id @default(cuid())
  name         String? // For group conversations
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[]
  messages     Message[]
  isGroup      Boolean                   @default(false)
  group        Group?
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             String        @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  readBy         MessageRead[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  receiverId     String?
  sender         User          @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver       User?         @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: SetNull)
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  type           MessageType   @default(TEXT)
  fileUrl        String?
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model Group {
  id           String       @id @default(cuid())
  name         String
  description  String?
  avatar       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  creatorId    String
  creator      User         @relation("GroupCreator", fields: [creatorId], references: [id])
  conversation Conversation @relation(fields: [id], references: [id], onDelete: Cascade)
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
}
